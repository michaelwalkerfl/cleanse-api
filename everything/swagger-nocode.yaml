swagger: '2.0'
info:
  version: '1.0'
  title: Analyze API
  description: |
    ![logo](https://analyzemail.com/static/images/logo.png "analyzemail.com")

    **This collection is intended to help utilize the analyzemail.com API**

    If you are not already signed up, please visit for your free developer account [https://analyzemail.com/](https://analyzemail.com/)


    ---
  contact: {}
host: analyzemail.com
basePath: /api/v1
securityDefinitions:
  Bearer:
    description: |
      For accessing the API a valid JWT token must be passed in all the queries in
      the 'Authorization' header.


      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /auth given a valid user email and password.


      The following syntax must be used in the 'Authorization' header :

          Bearer: xxxxxx.yyyyyyy.zzzzzz
    type: apiKey
    name: Authorization
    in: header
schemes:
  - https
consumes:
  - application/json
produces:
  - application/json
parameters:
  username:
    in: query
    name: username
    required: true
    type: string
paths:
  /auth:
    post:
      description: Authentication user and get generated user tokens.
      summary: Authenticate User
      tags:
        - Auth Token
      operationId: AuthPost
      produces:
        - application/json
      parameters:
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/AuthenticateUserRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/AuthenticateUser'
          examples:
            application/json:
              data:
                refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYjNkYWQ1My04MmM4LTQwYmYtYmY1Zi03NDdhYTYwZmNmYWQiLCJleHAiOjE1NDQ1NjAzNDksImlhdCI6MTU0MTk2ODM0OSwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE1NDE5NjgzNDksImlkZW50aXR5Ijp7InBhc3N3b3JkIjoiY2hhbmdldGhpc3Bhc3N3b3JkXyIsImVtYWlsIjoiaW1AY2xlYW5zZS5zdHVkaW8ifX0.9LCxxTgQjBUI772xnVlJAZDMnk0s7HYto0HDM6SBdYI
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3NmI3YzQ4MS1lMWFhLTQ2NTctYjllOC02MjA2Y2Q4NTc1MjciLCJleHAiOjE1NDE5NjkyNDksImZyZXNoIjpmYWxzZSwiaWF0IjoxNTQxOTY4MzQ5LCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTQxOTY4MzQ5LCJpZGVudGl0eSI6eyJwYXNzd29yZCI6ImNoYW5nZXRoaXNwYXNzd29yZF8iLCJlbWFpbCI6ImltQGNsZWFuc2Uuc3R1ZGlvIn19.4ifU0m3_ZXD_LHXlAKPXcIIP0Nmw3vUtTEpJLRuJW_Y
              ok: true
      security:
        - Bearer: []
  /list:
    post:
      description: Import List of emails
      summary: Import List
      tags:
        - Import Email List
      operationId: ListPost
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
        - name: Body
          in: body
          required: true
          description: ''
          schema:
            $ref: '#/definitions/ImportListRequest'
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/List'
          examples:
            application/json:
              message: List successfully added.
              success: true
      security:
        - Bearer: []
  '/list/{list_id}':
    delete:
      description: Delete List
      summary: Delete List
      tags:
        - Delete Email List
      operationId: List7Delete
      produces:
        - application/json
      parameters:
        - description: List ID
          in: path
          name: list_id
          required: true
          type: integer
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DeleteList'
          examples:
            application/json:
              message: List succesfully deleted
      security:
        - Bearer: []
  '/list/check_email/{email}':
    get:
      description: Queue cleanse task on list
      summary: Cleanse Single Email
      tags:
        - Clean Single Email
      operationId: ListCheckEmailTestTestComGet
      produces:
        - application/json
      parameters:
        - description: Email to check and validate
          in: path
          name: email
          required: true
          type: string
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CleanseListCheckEmail'
          examples:
            application/json:
              message: Email cleanse successful.
              success: true
      security:
        - Bearer: []
  '/list/cleaned/{list_name}':
    delete:
      description: Delete List
      summary: Delete Cleaned List
      tags:
        - Delete Cleaned Email List
      operationId: ListCleanedTestListCleanse3ZipDelete
      produces:
        - application/json
      parameters:
        - description: List filename to delete
          in: path
          name: list_name
          required: true
          type: string
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/DeleteCleanedList'
          examples:
            application/json:
              message: Cleaned list succesfully deleted.
      security:
        - Bearer: []
    get:
      description: Download Cleaned List
      summary: Download Cleaned List
      tags:
        - Download Cleaned List
      operationId: ListCleanedTestListCleanse3ZipGet
      produces:
        - application/json
      parameters:
        - description: List filename to delete
          in: path
          name: list_name
          required: true
          type: string
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
      security:
        - Bearer: []
  '/list/cleanse/{list_id}':
    get:
      description: Queue cleanse task on list
      summary: Cleanse Email List
      tags:
        - Clean Email List
      operationId: ListCleanse11Get
      produces:
        - application/json
      parameters:
        - description: List ID
          in: path
          name: list_id
          required: true
          type: integer
        - name: username
          in: query
          required: true
          type: string
          description: ''
        - name: Content-Type
          in: header
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/CleanseList'
          examples:
            application/json:
              message: List "test-list-cleanse3.txt" has been sent for cleanse successfully.
      security:
        - Bearer: []
  /lists:
    get:
      description: Get current lists uploaded.
      summary: Get email lists
      tags:
        - Get Email Lists
      operationId: ListsGet
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Lists'
      security:
        - Bearer: []
  /lists/cleaned:
    get:
      description: 'TODO: Add Description'
      summary: Get cleaned user lists
      tags:
        - Get Cleaned Email Lists
      operationId: ListsCleanedGet
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          required: true
          type: string
          description: ''
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/Getcleaneduserlists'
          examples:
            application/json:
              data:
                files:
                  - test-list-cleanse3.zip
      security:
        - Bearer: []
definitions:
  AuthenticateUser:
    example:
      data:
        refresh: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYjNkYWQ1My04MmM4LTQwYmYtYmY1Zi03NDdhYTYwZmNmYWQiLCJleHAiOjE1NDQ1NjAzNDksImlhdCI6MTU0MTk2ODM0OSwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE1NDE5NjgzNDksImlkZW50aXR5Ijp7InBhc3N3b3JkIjoiY2hhbmdldGhpc3Bhc3N3b3JkXyIsImVtYWlsIjoiaW1AY2xlYW5zZS5zdHVkaW8ifX0.9LCxxTgQjBUI772xnVlJAZDMnk0s7HYto0HDM6SBdYI
        token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3NmI3YzQ4MS1lMWFhLTQ2NTctYjllOC02MjA2Y2Q4NTc1MjciLCJleHAiOjE1NDE5NjkyNDksImZyZXNoIjpmYWxzZSwiaWF0IjoxNTQxOTY4MzQ5LCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTQxOTY4MzQ5LCJpZGVudGl0eSI6eyJwYXNzd29yZCI6ImNoYW5nZXRoaXNwYXNzd29yZF8iLCJlbWFpbCI6ImltQGNsZWFuc2Uuc3R1ZGlvIn19.4ifU0m3_ZXD_LHXlAKPXcIIP0Nmw3vUtTEpJLRuJW_Y
      ok: true
    type: object
    properties:
      data:
        $ref: '#/definitions/Data'
      ok:
        type: boolean
    required:
      - data
      - ok
  AuthenticateUserRequest:
    properties:
      email:
        description: Account Email address
        example: youraccount@analyzemail.com
        type: string
      password:
        description: Account Password
        example: yourpassword
        type: string
    type: object
    required:
      - email
      - password
  CleanseList:
    example:
      message: List "test-list-cleanse3.txt" has been sent for cleanse successfully.
    type: object
    properties:
      message:
        type: string
    required:
      - message
  CleanseListCheckEmail:
    example:
      message: Email cleanse successful.
      success: true
    type: object
    properties:
      message:
        type: string
      success:
        type: boolean
    required:
      - message
      - success
  Data:
    type: object
    properties:
      refresh:
        type: string
      token:
        type: string
    required:
      - refresh
      - token
  Data2:
    type: object
    properties:
      files:
        type: array
        items:
          type: string
    required:
      - files
  DeleteCleanedList:
    example:
      message: Cleaned list succesfully deleted.
    type: object
    properties:
      message:
        type: string
    required:
      - message
  DeleteList:
    example:
      message: List succesfully deleted
    type: object
    properties:
      message:
        type: string
    required:
      - message
  Getcleaneduserlists:
    example:
      data:
        files:
          - test-list-cleanse3.zip
    type: object
    properties:
      data:
        $ref: '#/definitions/Data2'
    required:
      - data
  ImportListRequest:
    example:
      filename: testlist
      emails:
        - test1@test.com
        - test2@test.com
        - test3@test.com
        - test4@test.com
        - test5@test.com
        - test6@test.com
        - test7@test.com
        - test8@test.com
        - test9@test.com
    type: object
    properties:
      filename:
        type: string
      emails:
        type: array
        items:
          type: string
    required:
      - filename
      - emails
  List:
    type: object
    properties:
      count:
        example: 500000
        type: integer
        format: int32
      id:
        example: 1
        type: integer
        format: int32
      last_cleanse:
        example: 'Sun, 19 Aug 2018 18:19:02 -0000'
        type: string
      name:
        example: test_list-001.txt
        type: string
      subscribers_dangerous:
        example: 0
        type: integer
        format: int32
      subscribers_good:
        example: 0
        type: integer
        format: int32
      subscribers_invalid:
        example: 0
        type: integer
        format: int32
      subscribers_valid:
        example: 0
        type: integer
        format: int32
    required:
      - count
      - id
      - last_cleanse
      - name
      - subscribers_dangerous
      - subscribers_good
      - subscribers_invalid
      - subscribers_valid
  Lists:
    example: |-
      {
        "data": {
            "lists": [
                [
                    {
                        "count": 1050,
                        "id": 1,
                        "last_cleanse": "Thu, 15 Nov 2018 00:10:56 -0000",
                        "name": "test-list.txt",
                        "subscribers_dangerous": 0,
                        "subscribers_good": 0,
                        "subscribers_invalid": 0,
                        "subscribers_valid": 0
                    }
                ]
            ]
        }
      }
    type: object
    properties:
      data:
        type: string
    required:
      - data
