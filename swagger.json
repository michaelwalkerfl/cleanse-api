{
  "swagger": "2.0",
  "info": {
    "version": "1.0",
    "title": "Cleanse API",
    "description": "![logo](https://cleanse.studio/static/images/dark-logo.png \"Cleanse.studio\")\n\n**This collection is intended to help utilize the cleanse.studio API**\n\nIf you are not already signed up, please visit for your free developer account [https://cleanse.studio/](https://cleanse.studio/)\n\n\n---\n",
    "contact": {}
  },
  "host": "cleanse.studio",
  "basePath": "/api/v1",
  "securityDefinitions": {
    "Bearer": {
      "description": "For accessing the API a valid JWT token must be passed in all the queries in\nthe 'Authorization' header.\n\n\nA valid JWT token is generated by the API and retourned as answer of a call\nto the route /auth given a valid user email and password.\n\n\nThe following syntax must be used in the 'Authorization' header :\n\n    Bearer: xxxxxx.yyyyyyy.zzzzzz\n",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "parameters": {
    "username": {
      "in": "query",
      "name": "username",
      "required": true,
      "type": "string"
    }
  },
  "paths": {
    "/auth": {
      "post": {
        "description": "Authentication user and get generated user tokens.",
        "summary": "Authenticate User",
        "tags": [
          "Auth Token"
        ],
        "operationId": "AuthPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthenticateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/AuthenticateUser"
            },
            "examples": {
              "application/json": {
                "data": {
                  "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYjNkYWQ1My04MmM4LTQwYmYtYmY1Zi03NDdhYTYwZmNmYWQiLCJleHAiOjE1NDQ1NjAzNDksImlhdCI6MTU0MTk2ODM0OSwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE1NDE5NjgzNDksImlkZW50aXR5Ijp7InBhc3N3b3JkIjoiY2hhbmdldGhpc3Bhc3N3b3JkXyIsImVtYWlsIjoiaW1AY2xlYW5zZS5zdHVkaW8ifX0.9LCxxTgQjBUI772xnVlJAZDMnk0s7HYto0HDM6SBdYI",
                  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3NmI3YzQ4MS1lMWFhLTQ2NTctYjllOC02MjA2Y2Q4NTc1MjciLCJleHAiOjE1NDE5NjkyNDksImZyZXNoIjpmYWxzZSwiaWF0IjoxNTQxOTY4MzQ5LCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTQxOTY4MzQ5LCJpZGVudGl0eSI6eyJwYXNzd29yZCI6ImNoYW5nZXRoaXNwYXNzd29yZF8iLCJlbWFpbCI6ImltQGNsZWFuc2Uuc3R1ZGlvIn19.4ifU0m3_ZXD_LHXlAKPXcIIP0Nmw3vUtTEpJLRuJW_Y"
                },
                "ok": true
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/auth\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/auth\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/auth\"\n\n\tpayload := strings.NewReader(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\");\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/auth\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://cleanse.studio/api/v1/auth\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/auth\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://cleanse.studio/api/v1/auth\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/auth\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://cleanse.studio/api/v1/auth',\n  headers: { 'content-type': 'application/json' },\n  body:\n   { email: '<ADD STRING VALUE>', password: '<ADD STRING VALUE>' },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://cleanse.studio/api/v1/auth\");\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"email\": @\"<ADD STRING VALUE>\",\n                              @\"password\": @\"<ADD STRING VALUE>\" };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/auth\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/auth\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/auth\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/auth');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}');\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/auth');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\npayload = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/api/v1/auth\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/auth\"\n\npayload = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/auth\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"email\\\":\\\"<ADD STRING VALUE>\\\",\\\"password\\\":\\\"<ADD STRING VALUE>\\\"}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request POST \\\n  --url https://cleanse.studio/api/v1/auth \\\n  --header 'content-type: application/json' \\\n  --data '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}'"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}' |  \\\n  http POST https://cleanse.studio/api/v1/auth \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --body-data '{\"email\":\"<ADD STRING VALUE>\",\"password\":\"<ADD STRING VALUE>\"}' \\\n  --output-document \\\n  - https://cleanse.studio/api/v1/auth"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"email\": \"<ADD STRING VALUE>\",\n  \"password\": \"<ADD STRING VALUE>\"\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/auth\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/list": {
      "post": {
        "description": "Import List of emails",
        "summary": "Import List",
        "tags": [
          "Import Email List"
        ],
        "operationId": "ListPost",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Body",
            "in": "body",
            "required": true,
            "description": "",
            "schema": {
              "$ref": "#/definitions/ImportListRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/List"
            },
            "examples": {
              "application/json": {
                "message": "List successfully added.",
                "success": true
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"POST\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\ncurl_easy_setopt(hnd, CURLOPT_POSTFIELDS, \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/json\");\nrequest.AddParameter(\"application/json\", \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\", ParameterType.RequestBody);\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\"\n\n\tpayload := strings.NewReader(\"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n\n\treq, _ := http.NewRequest(\"POST\", url, payload)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\");\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\")\n  .post(body)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.post(\"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .body(\"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\",\n  \"method\": \"POST\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  },\n  \"processData\": false,\n  \"data\": \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = JSON.stringify({\n  \"filename\": \"<ADD STRING VALUE>\",\n  \"emails\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"POST\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.write(JSON.stringify({ filename: '<ADD STRING VALUE>',\n  emails: [ '<ADD STRING VALUE>' ] }));\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'POST',\n  url: 'https://cleanse.studio/api/v1/list',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' },\n  body:\n   { filename: '<ADD STRING VALUE>',\n     emails: [ '<ADD STRING VALUE>' ] },\n  json: true };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"POST\", \"https://cleanse.studio/api/v1/list\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\nreq.type(\"json\");\nreq.send({\n  \"filename\": \"<ADD STRING VALUE>\",\n  \"emails\": [\n    \"<ADD STRING VALUE>\"\n  ]\n});\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\nNSDictionary *parameters = @{ @\"filename\": @\"<ADD STRING VALUE>\",\n                              @\"emails\": @[ @\"<ADD STRING VALUE>\" ] };\n\nNSData *postData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:nil];\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"POST\"];\n[request setAllHTTPHeaderFields:headers];\n[request setHTTPBody:postData];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\nlet body = Cohttp_lwt_body.of_string \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\" in\n\nClient.call ~headers ~body `POST uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"POST\",\n  CURLOPT_POSTFIELDS => \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list');\n$request->setMethod(HTTP_METH_POST);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$request->setBody('{\"filename\":\"<ADD STRING VALUE>\",\"emails\":[\"<ADD STRING VALUE>\"]}');\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$body = new http\\Message\\Body;\n$body->append('{\"filename\":\"<ADD STRING VALUE>\",\"emails\":[\"<ADD STRING VALUE>\"]}');\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list');\n$request->setRequestMethod('POST');\n$request->setBody($body);\n\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\npayload = \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"POST\", \"/api/v1/list?username=SOME_STRING_VALUE\", payload, headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\npayload = \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"POST\", url, data=payload, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Post.new(url)\nrequest[\"content-type\"] = 'application/json'\nrequest.body = \"{\\\"filename\\\":\\\"<ADD STRING VALUE>\\\",\\\"emails\\\":[\\\"<ADD STRING VALUE>\\\"]}\"\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request POST \\\n  --url 'https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json' \\\n  --data '{\"filename\":\"<ADD STRING VALUE>\",\"emails\":[\"<ADD STRING VALUE>\"]}'"
          },
          {
            "lang": "Shell_httpie",
            "source": "echo '{\"filename\":\"<ADD STRING VALUE>\",\"emails\":[\"<ADD STRING VALUE>\"]}' |  \\\n  http POST 'https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method POST \\\n  --header 'content-type: application/json' \\\n  --body-data '{\"filename\":\"<ADD STRING VALUE>\",\"emails\":[\"<ADD STRING VALUE>\"]}' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\nlet parameters = [\n  \"filename\": \"<ADD STRING VALUE>\",\n  \"emails\": [\"<ADD STRING VALUE>\"]\n]\n\nlet postData = NSJSONSerialization.dataWithJSONObject(parameters, options: nil, error: nil)\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"POST\"\nrequest.allHTTPHeaderFields = headers\nrequest.HTTPBody = postData\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/list/{list_id}": {
      "delete": {
        "description": "Delete List",
        "summary": "Delete List",
        "tags": [
          "Delete Email List"
        ],
        "operationId": "List7Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "List ID",
            "in": "path",
            "name": "list_id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeleteList"
            },
            "examples": {
              "application/json": {
                "message": "List succesfully deleted"
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n  .delete(null)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://cleanse.studio/api/v1/list/%7Blist_id%7D',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://cleanse.studio/api/v1/list/%7Blist_id%7D\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list/%7Blist_id%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list/%7Blist_id%7D');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"DELETE\", \"/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list/%7Blist_id%7D\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request DELETE \\\n  --url 'https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list/%7Blist_id%7D?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/list/check_email/{email}": {
      "get": {
        "description": "Queue cleanse task on list",
        "summary": "Cleanse Single Email",
        "tags": [
          "Clean Single Email"
        ],
        "operationId": "ListCheckEmailTestTestComGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "Email to check and validate",
            "in": "path",
            "name": "email",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CleanseListCheckEmail"
            },
            "examples": {
              "application/json": {
                "message": "Email cleanse successful.",
                "success": true
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request GET \\\n  --url 'https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list/check_email/%7Bemail%7D?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/list/cleaned/{list_name}": {
      "delete": {
        "description": "Delete List",
        "summary": "Delete Cleaned List",
        "tags": [
          "Delete Cleaned Email List"
        ],
        "operationId": "ListCleanedTestListCleanse3ZipDelete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "List filename to delete",
            "in": "path",
            "name": "list_name",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/DeleteCleanedList"
            },
            "examples": {
              "application/json": {
                "message": "Cleaned list succesfully deleted."
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"DELETE\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.DELETE);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"DELETE\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n  .delete(null)\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.delete(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  \"method\": \"DELETE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"DELETE\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'DELETE',\n  url: 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"DELETE\", \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"DELETE\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `DELETE uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"DELETE\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D');\n$request->setMethod(HTTP_METH_DELETE);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D');\n$request->setRequestMethod('DELETE');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"DELETE\", \"/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request DELETE \\\n  --url 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http DELETE 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method DELETE \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"DELETE\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      },
      "get": {
        "description": "Download Cleaned List",
        "summary": "Download Cleaned List",
        "tags": [
          "Download Cleaned List"
        ],
        "operationId": "ListCleanedTestListCleanse3ZipGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "List filename to delete",
            "in": "path",
            "name": "list_name",
            "required": true,
            "type": "string"
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request GET \\\n  --url 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list/cleaned/%7Blist_name%7D?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/list/cleanse/{list_id}": {
      "get": {
        "description": "Queue cleanse task on list",
        "summary": "Cleanse Email List",
        "tags": [
          "Clean Email List"
        ],
        "operationId": "ListCleanse11Get",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "description": "List ID",
            "in": "path",
            "name": "list_id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/CleanseList"
            },
            "examples": {
              "application/json": {
                "message": "List \"test-list-cleanse3.txt\" has been sent for cleanse successfully."
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request GET \\\n  --url 'https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/list/cleanse/%7Blist_id%7D?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/lists": {
      "get": {
        "description": "Get current lists uploaded.",
        "summary": "Get email lists",
        "tags": [
          "Get Email Lists"
        ],
        "operationId": "ListsGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Lists"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/lists?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://cleanse.studio/api/v1/lists',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://cleanse.studio/api/v1/lists\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/lists');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/lists');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/v1/lists?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/lists\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request GET \\\n  --url 'https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/lists?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    },
    "/lists/cleaned": {
      "get": {
        "description": "TODO: Add Description",
        "summary": "Get cleaned user lists",
        "tags": [
          "Get Cleaned Email Lists"
        ],
        "operationId": "ListsCleanedGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": true,
            "type": "string",
            "description": ""
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "$ref": "#/definitions/Getcleaneduserlists"
            },
            "examples": {
              "application/json": {
                "data": {
                  "files": [
                    "test-list-cleanse3.zip"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "x-code-samples": [
          {
            "lang": "C_libcurl",
            "source": "CURL *hnd = curl_easy_init();\n\ncurl_easy_setopt(hnd, CURLOPT_CUSTOMREQUEST, \"GET\");\ncurl_easy_setopt(hnd, CURLOPT_URL, \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\");\n\nstruct curl_slist *headers = NULL;\nheaders = curl_slist_append(headers, \"content-type: application/json\");\ncurl_easy_setopt(hnd, CURLOPT_HTTPHEADER, headers);\n\nCURLcode ret = curl_easy_perform(hnd);"
          },
          {
            "lang": "Csharp_restsharp",
            "source": "var client = new RestClient(\"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\");\nvar request = new RestRequest(Method.GET);\nrequest.AddHeader(\"content-type\", \"application/json\");\nIRestResponse response = client.Execute(request);"
          },
          {
            "lang": "Go_native",
            "source": "package main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"io/ioutil\"\n)\n\nfunc main() {\n\n\turl := \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\"\n\n\treq, _ := http.NewRequest(\"GET\", url, nil)\n\n\treq.Header.Add(\"content-type\", \"application/json\")\n\n\tres, _ := http.DefaultClient.Do(req)\n\n\tdefer res.Body.Close()\n\tbody, _ := ioutil.ReadAll(res.Body)\n\n\tfmt.Println(res)\n\tfmt.Println(string(body))\n\n}"
          },
          {
            "lang": "Java_okhttp",
            "source": "OkHttpClient client = new OkHttpClient();\n\nRequest request = new Request.Builder()\n  .url(\"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\")\n  .get()\n  .addHeader(\"content-type\", \"application/json\")\n  .build();\n\nResponse response = client.newCall(request).execute();"
          },
          {
            "lang": "Java_unirest",
            "source": "HttpResponse<String> response = Unirest.get(\"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\")\n  .header(\"content-type\", \"application/json\")\n  .asString();"
          },
          {
            "lang": "Javascript_jquery",
            "source": "var settings = {\n  \"async\": true,\n  \"crossDomain\": true,\n  \"url\": \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\",\n  \"method\": \"GET\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n}\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});"
          },
          {
            "lang": "Javascript_xhr",
            "source": "var data = null;\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function () {\n  if (this.readyState === this.DONE) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\");\nxhr.setRequestHeader(\"content-type\", \"application/json\");\n\nxhr.send(data);"
          },
          {
            "lang": "Node_native",
            "source": "var http = require(\"https\");\n\nvar options = {\n  \"method\": \"GET\",\n  \"hostname\": \"cleanse.studio\",\n  \"port\": null,\n  \"path\": \"/api/v1/lists/cleaned?username=SOME_STRING_VALUE\",\n  \"headers\": {\n    \"content-type\": \"application/json\"\n  }\n};\n\nvar req = http.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function () {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n});\n\nreq.end();"
          },
          {
            "lang": "Node_request",
            "source": "var request = require(\"request\");\n\nvar options = { method: 'GET',\n  url: 'https://cleanse.studio/api/v1/lists/cleaned',\n  qs: { username: 'SOME_STRING_VALUE' },\n  headers: { 'content-type': 'application/json' } };\n\nrequest(options, function (error, response, body) {\n  if (error) throw new Error(error);\n\n  console.log(body);\n});\n"
          },
          {
            "lang": "Node_unirest",
            "source": "var unirest = require(\"unirest\");\n\nvar req = unirest(\"GET\", \"https://cleanse.studio/api/v1/lists/cleaned\");\n\nreq.query({\n  \"username\": \"SOME_STRING_VALUE\"\n});\n\nreq.headers({\n  \"content-type\": \"application/json\"\n});\n\n\nreq.end(function (res) {\n  if (res.error) throw new Error(res.error);\n\n  console.log(res.body);\n});\n"
          },
          {
            "lang": "Objc_nsurlsession",
            "source": "#import <Foundation/Foundation.h>\n\nNSDictionary *headers = @{ @\"content-type\": @\"application/json\" };\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\"]\n                                                       cachePolicy:NSURLRequestUseProtocolCachePolicy\n                                                   timeoutInterval:10.0];\n[request setHTTPMethod:@\"GET\"];\n[request setAllHTTPHeaderFields:headers];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\n                                            completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n                                                if (error) {\n                                                    NSLog(@\"%@\", error);\n                                                } else {\n                                                    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n                                                    NSLog(@\"%@\", httpResponse);\n                                                }\n                                            }];\n[dataTask resume];"
          },
          {
            "lang": "Ocaml_cohttp",
            "source": "open Cohttp_lwt_unix\nopen Cohttp\nopen Lwt\n\nlet uri = Uri.of_string \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\" in\nlet headers = Header.add (Header.init ()) \"content-type\" \"application/json\" in\n\nClient.call ~headers `GET uri\n>>= fun (res, body_stream) ->\n  (* Do stuff with the result *)"
          },
          {
            "lang": "Php_curl",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\",\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => \"\",\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 30,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => \"GET\",\n  CURLOPT_HTTPHEADER => array(\n    \"content-type: application/json\"\n  ),\n));\n\n$response = curl_exec($curl);\n$err = curl_error($curl);\n\ncurl_close($curl);\n\nif ($err) {\n  echo \"cURL Error #:\" . $err;\n} else {\n  echo $response;\n}"
          },
          {
            "lang": "Php_http1",
            "source": "<?php\n\n$request = new HttpRequest();\n$request->setUrl('https://cleanse.studio/api/v1/lists/cleaned');\n$request->setMethod(HTTP_METH_GET);\n\n$request->setQueryData(array(\n  'username' => 'SOME_STRING_VALUE'\n));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\ntry {\n  $response = $request->send();\n\n  echo $response->getBody();\n} catch (HttpException $ex) {\n  echo $ex;\n}"
          },
          {
            "lang": "Php_http2",
            "source": "<?php\n\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n\n$request->setRequestUrl('https://cleanse.studio/api/v1/lists/cleaned');\n$request->setRequestMethod('GET');\n$request->setQuery(new http\\QueryString(array(\n  'username' => 'SOME_STRING_VALUE'\n)));\n\n$request->setHeaders(array(\n  'content-type' => 'application/json'\n));\n\n$client->enqueue($request)->send();\n$response = $client->getResponse();\n\necho $response->getBody();"
          },
          {
            "lang": "Python_python3",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"cleanse.studio\")\n\nheaders = { 'content-type': \"application/json\" }\n\nconn.request(\"GET\", \"/api/v1/lists/cleaned?username=SOME_STRING_VALUE\", headers=headers)\n\nres = conn.getresponse()\ndata = res.read()\n\nprint(data.decode(\"utf-8\"))"
          },
          {
            "lang": "Python_requests",
            "source": "import requests\n\nurl = \"https://cleanse.studio/api/v1/lists/cleaned\"\n\nquerystring = {\"username\":\"SOME_STRING_VALUE\"}\n\nheaders = {'content-type': 'application/json'}\n\nresponse = requests.request(\"GET\", url, headers=headers, params=querystring)\n\nprint(response.text)"
          },
          {
            "lang": "Ruby_native",
            "source": "require 'uri'\nrequire 'net/http'\n\nurl = URI(\"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\")\n\nhttp = Net::HTTP.new(url.host, url.port)\nhttp.use_ssl = true\nhttp.verify_mode = OpenSSL::SSL::VERIFY_NONE\n\nrequest = Net::HTTP::Get.new(url)\nrequest[\"content-type\"] = 'application/json'\n\nresponse = http.request(request)\nputs response.read_body"
          },
          {
            "lang": "Shell_curl",
            "source": "curl --request GET \\\n  --url 'https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE' \\\n  --header 'content-type: application/json'"
          },
          {
            "lang": "Shell_httpie",
            "source": "http GET 'https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE' \\\n  content-type:application/json"
          },
          {
            "lang": "Shell_wget",
            "source": "wget --quiet \\\n  --method GET \\\n  --header 'content-type: application/json' \\\n  --output-document \\\n  - 'https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE'"
          },
          {
            "lang": "Swift_nsurlsession",
            "source": "import Foundation\n\nlet headers = [\"content-type\": \"application/json\"]\n\nvar request = NSMutableURLRequest(URL: NSURL(string: \"https://cleanse.studio/api/v1/lists/cleaned?username=SOME_STRING_VALUE\")!,\n                                        cachePolicy: .UseProtocolCachePolicy,\n                                    timeoutInterval: 10.0)\nrequest.HTTPMethod = \"GET\"\nrequest.allHTTPHeaderFields = headers\n\nlet session = NSURLSession.sharedSession()\nlet dataTask = session.dataTaskWithRequest(request, completionHandler: { (data, response, error) -> Void in\n  if (error != nil) {\n    println(error)\n  } else {\n    let httpResponse = response as? NSHTTPURLResponse\n    println(httpResponse)\n  }\n})\n\ndataTask.resume()"
          }
        ]
      }
    }
  },
  "definitions": {
    "AuthenticateUser": {
      "example": {
        "data": {
          "refresh": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiJkYjNkYWQ1My04MmM4LTQwYmYtYmY1Zi03NDdhYTYwZmNmYWQiLCJleHAiOjE1NDQ1NjAzNDksImlhdCI6MTU0MTk2ODM0OSwidHlwZSI6InJlZnJlc2giLCJuYmYiOjE1NDE5NjgzNDksImlkZW50aXR5Ijp7InBhc3N3b3JkIjoiY2hhbmdldGhpc3Bhc3N3b3JkXyIsImVtYWlsIjoiaW1AY2xlYW5zZS5zdHVkaW8ifX0.9LCxxTgQjBUI772xnVlJAZDMnk0s7HYto0HDM6SBdYI",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiI3NmI3YzQ4MS1lMWFhLTQ2NTctYjllOC02MjA2Y2Q4NTc1MjciLCJleHAiOjE1NDE5NjkyNDksImZyZXNoIjpmYWxzZSwiaWF0IjoxNTQxOTY4MzQ5LCJ0eXBlIjoiYWNjZXNzIiwibmJmIjoxNTQxOTY4MzQ5LCJpZGVudGl0eSI6eyJwYXNzd29yZCI6ImNoYW5nZXRoaXNwYXNzd29yZF8iLCJlbWFpbCI6ImltQGNsZWFuc2Uuc3R1ZGlvIn19.4ifU0m3_ZXD_LHXlAKPXcIIP0Nmw3vUtTEpJLRuJW_Y"
        },
        "ok": true
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Data"
        },
        "ok": {
          "type": "boolean"
        }
      },
      "required": [
        "data",
        "ok"
      ]
    },
    "AuthenticateUserRequest": {
      "properties": {
        "email": {
          "description": "Account Email address",
          "example": "im@cleanse.studio",
          "type": "string"
        },
        "password": {
          "description": "Account Password",
          "example": "changethispassword_",
          "type": "string"
        }
      },
      "type": "object",
      "required": [
        "email",
        "password"
      ]
    },
    "CleanseList": {
      "example": {
        "message": "List \"test-list-cleanse3.txt\" has been sent for cleanse successfully."
      },
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "CleanseListCheckEmail": {
      "example": {
        "message": "Email cleanse successful.",
        "success": true
      },
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      },
      "required": [
        "message",
        "success"
      ]
    },
    "Data": {
      "type": "object",
      "properties": {
        "refresh": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "required": [
        "refresh",
        "token"
      ]
    },
    "Data2": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "files"
      ]
    },
    "DeleteCleanedList": {
      "example": {
        "message": "Cleaned list succesfully deleted."
      },
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "DeleteList": {
      "example": {
        "message": "List succesfully deleted"
      },
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      },
      "required": [
        "message"
      ]
    },
    "Getcleaneduserlists": {
      "example": {
        "data": {
          "files": [
            "test-list-cleanse3.zip"
          ]
        }
      },
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/Data2"
        }
      },
      "required": [
        "data"
      ]
    },
    "ImportListRequest": {
      "example": {
        "filename": "testlist",
        "emails": [
          "test1@test.com",
          "test2@test.com",
          "test3@test.com",
          "test4@test.com",
          "test5@test.com",
          "test6@test.com",
          "test7@test.com",
          "test8@test.com",
          "test9@test.com"
        ]
      },
      "type": "object",
      "properties": {
        "filename": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "filename",
        "emails"
      ]
    },
    "List": {
      "type": "object",
      "properties": {
        "count": {
          "example": 500000,
          "type": "integer",
          "format": "int32"
        },
        "id": {
          "example": 1,
          "type": "integer",
          "format": "int32"
        },
        "last_cleanse": {
          "example": "Sun, 19 Aug 2018 18:19:02 -0000",
          "type": "string"
        },
        "name": {
          "example": "test_list-001.txt",
          "type": "string"
        },
        "subscribers_dangerous": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "subscribers_good": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "subscribers_invalid": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        },
        "subscribers_valid": {
          "example": 0,
          "type": "integer",
          "format": "int32"
        }
      },
      "required": [
        "count",
        "id",
        "last_cleanse",
        "name",
        "subscribers_dangerous",
        "subscribers_good",
        "subscribers_invalid",
        "subscribers_valid"
      ]
    },
    "Lists": {
      "example": "{\n  \"data\": {\n      \"lists\": [\n          [\n              {\n                  \"count\": 1050,\n                  \"id\": 1,\n                  \"last_cleanse\": \"Thu, 15 Nov 2018 00:10:56 -0000\",\n                  \"name\": \"test-list.txt\",\n                  \"subscribers_dangerous\": 0,\n                  \"subscribers_good\": 0,\n                  \"subscribers_invalid\": 0,\n                  \"subscribers_valid\": 0\n              }\n          ]\n      ]\n  }\n}",
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        }
      },
      "required": [
        "data"
      ]
    }
  }
}
